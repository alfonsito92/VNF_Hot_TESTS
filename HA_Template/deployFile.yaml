heat_template_version: 2016-04-08

description: >
  Template to deploy a HA pair of servers (based in mainServer.yaml) connected to same subnet
  Created by Altran.

parameters:

  image_id: 
    type: string
    description: Image for VM

  vm_name:
    type: string
    description: Hostname name

  vm_names:
    type: comma_delimited_list

  vn_name: 
    type: string
    description: Id for the virtual network to create

  vn_subnet_name: 
    type: string
    description: Id for the virtual network to create

  segmentation_id:
    type: string
    label: Segmentation id for VN

  ip_vm:
    type: string
    label: IP address for VM

  ips_vms:
    type: comma_delimited_list
    label: IP addresses for VMs

  subnet_vn_CIDR:
    type: string
    label: Subnet for private_network

  vn_gateway:
    type: string
    label: GW IP private_network

  routerHAName:
    type: string
    label: VRF externally connected

  volume_type:
    type: string
    description: Quality of the Volume to be created
    #default: Platinum_01
    # FLASH
    #default: Gold_01
    # SAS
    #default: Silver_01
    # NSAS

  volume_size:
    type: number
    description: Size of the block volume
    constraints: 
      - range: { min: 1, max: 1024}
        description: max size 1TB

  aZone:
    type: string
    label: Availability Zone

  securityGroupName:
    type: string
    label: Security group name

  keyName:
    type: string
    description: Name for Key

  affinityGroupName:
    type: string
    description: Afinnity group name

  # Bad definition
  # affinityPolicy:
  #   type: string
  #   label: Affinity policy 
  #   constraints:
  #     - allowed_values: 
  #       - anti-affinity
  #       - affinity

resources:

#Networks Creation
  neutron_net:
    type: OS::Neutron::Net
    properties:
      name: {get_param: vn_name}
      value_specs: {"provider:network_type": "vxlan", "provider:segmentation_id": { get_param: segmentation_id}}

  neutron_subnet:  
    type: OS::Neutron::Subnet
    properties:
      enable_dhcp: true
      gateway_ip: {get_param: vn_gateway}
      name: {get_param: vn_subnet_name}
      network_id:
        get_resource: neutron_net
      cidr: {get_param: subnet_vn_CIDR}

  routerHA:
    type: OS::Neutron::Router
    properties:
      name: { get_param: routerHAName }

  routerHA_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: routerHA }
      subnet_id: { get_resource: neutron_subnet }

  #Security group
  HASecurityGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: securityGroupName }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: "::/0"
          ethertype: IPv6
          protocol: udp 
        - remote_ip_prefix: "::/0"
          ethertype: IPv6
          protocol: tcp 
        - remote_ip_prefix: "::/0"
          ethertype: IPv6
          protocol: icmp 

  #Key creation
  HAKey:
     type: OS::Nova::KeyPair
     properties:
       save_private_key: true
       name: { get_param: keyName }

  #Flavor Definition
  HAflavor:
    type: OS::Nova::Flavor
    properties: 
      ram: 4096
      disk: 40
      swap: 0
      vcpus: 2
      extra_specs: {"hw:cpu_policy":"dedicated","hw:mem_page_size":"large"}

  serverGroup:
    type: OS::Nova::ServerGroup
    properties:
      name: { get_param: affinityGroupName }
      policies: ['anti-affinity']

  servers:
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: HotFiles/mainServer.yaml
        properties:
          index: "%index%"
          vMnames: { get_param: vm_names }
          image: { get_param: image_id }
          flavor: { get_resource: HAflavor }
          serverGroup: { get_resource: serverGroup }
          securityGroup: { get_resource: HASecurityGroup }
          privateNetwork: { get_resource: neutron_net }
          ipList: { get_param: ips_vms }
          volumeType: { get_param: volume_type }
          volumeSize: { get_param: volume_size }
          aZone: { get_param: aZone }
          key: { get_resource: HAKey }
